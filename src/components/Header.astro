---
import {EMAIL} from "../constants";

const navItems = [
    {
        title: "Experience",
        label: "experience",
        url: "/#experience",
    },
    {
        title: "About me",
        label: "about-me",
        url: "/#about-me",
    },
    {
        title: "Contact",
        label: "contact",
        url: 'mailto:' + EMAIL,
    },
]
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-yellow-400"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const textClass = "text-yellow-500"
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      let intersectingEntry = entries.find((entry) => entry.isIntersecting);
      if (intersectingEntry) {
        navItems.forEach((item) => {
          if (item.getAttribute("aria-label") === intersectingEntry.target.id) {
            item.classList.add(textClass)
          } else {
            item.classList.remove(textClass)
          }
        })
      }
    }

    let viewportHeight: number;
    let updateViewportHeight = () => {
      if(window.innerHeight !== undefined) {
        viewportHeight = window.innerHeight;
      } else {
        viewportHeight = document.documentElement.clientHeight;
      }
    }
    updateViewportHeight()

    const observer = (threshold: number) => { return new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: threshold,
    })}

    const defaultThreshold = 0.5
    const defaultObserver = observer(defaultThreshold)
    let extraObservers: IntersectionObserver[] = []

    let disconnectObservers = () => {
      defaultObserver.disconnect();
      extraObservers.forEach((extraObserver) => extraObserver.disconnect());
      extraObservers = [];
    }

    const registerObservers = () => {
      updateViewportHeight()
      disconnectObservers()
      sections.forEach((section) => {
        const sectionHeight = section.getBoundingClientRect().height;
        if (sectionHeight > viewportHeight * defaultThreshold) {
          const requiredThreshold = Math.min(viewportHeight / sectionHeight, 1);
          let longSectionObserver = observer(requiredThreshold);
          extraObservers.push(longSectionObserver)
          longSectionObserver.observe(section)
          return
        }
        defaultObserver.observe(section)
      })
    }

    registerObservers()

    //Register event listener for viewport change
    window.addEventListener("resize", () => {
      registerObservers()
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        disconnectObservers()
      } else {
        registerObservers()
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur bg-gray-800/90 ring-white/10;
    }
  }
</style>
